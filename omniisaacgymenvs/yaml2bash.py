import argparse
import yaml
import itertools
import os
import platform

def parse_yaml_file(yaml_file):
    """Parse YAML file and return configurations."""
    with open(yaml_file, 'r') as file:
        return yaml.safe_load(file)

def create_bash_script(script, configurations):
    """Create a Bash script containing the call to Python with parsed parameters."""
    script_content = ""
    python = "C:/Users/OWS-User/AppData/Local/ov/pkg/isaac_sim-2023.1.1/python.bat" if platform.system() == "Windows" else "python"
    for idx, run in enumerate(configurations, start=1):
        run_name, params = list(run.items())[0]
        script_content += f"echo '\n\n ------ Running {run_name} -------\n\n'\n"
        arguments = " ".join([f"+{key}={value}" for key, value in params.items()])
        script_content += f"{python} {script} {arguments}\n"
    return script_content

# This is creates one execution for every combination of parameters
def create_combinatorial_bash_script(script, param_names, combinations):
    script_content = ""
    python = "C:/Users/OWS-User/AppData/Local/ov/pkg/isaac_sim-2023.1.1/python.bat" if platform.system() == "Windows" else "python"

    for i, combo in enumerate(combinations):
        # Build the command string with all parameters
        script_content += f"\n\necho '------ Running {i + 1} run over {len(combinations)} -------'\n"
        params_str = ' '.join(f'+{name}={value}' for name, value in zip(param_names, combo))
        script_content += f'{python} {script} {params_str}\n'
    return script_content

def generate_combinations(param_values):
    # Extract the lists of parameter values
    values = list(param_values.values())
    # Generate all possible combinations
    return list(itertools.product(*values))

if __name__ == "__main__":
    configurations = parse_yaml_file("launch_config.yaml")['configurations']
    # script_content = create_bash_script("scripts/skrl/diana_tekken_ppofd.py", configurations)

    # Extract parameter names and values
    param_values = {}
    for param_dict in configurations:
        param_values.update(param_dict)
    param_names = list(param_values.keys())

    # Generate all combinations
    combinations = generate_combinations(param_values)
    script_content = create_combinatorial_bash_script("scripts/skrl/diana_tekken_ppofd.py", param_names, combinations)

    filename = "autogenerated_launch.bat"  if platform.system() == "Windows" else "autogenerated_launch.sh"
    with open(filename, "w") as f:
        f.write(script_content)

    os.chmod(filename, 0o755)
    print(f"Auto launch script {filename} generated successfully!")